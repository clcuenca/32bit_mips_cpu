// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2021 16:33:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mips_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mips_32_vlg_sample_tst(
	clock,
	sampler_tx
);
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mips_32_vlg_check_tst (
	opcode0,
	opcode1,
	opcode2,
	opcode3,
	opcode4,
	opcode5,
	read_0,
	read_1,
	read_2,
	read_3,
	read_4,
	read_5,
	sampler_rx
);
input  opcode0;
input  opcode1;
input  opcode2;
input  opcode3;
input  opcode4;
input  opcode5;
input  read_0;
input  read_1;
input  read_2;
input  read_3;
input  read_4;
input  read_5;
input sampler_rx;

reg  opcode0_expected;
reg  opcode1_expected;
reg  opcode2_expected;
reg  opcode3_expected;
reg  opcode4_expected;
reg  opcode5_expected;
reg  read_0_expected;
reg  read_1_expected;
reg  read_2_expected;
reg  read_3_expected;
reg  read_4_expected;
reg  read_5_expected;

reg  opcode0_prev;
reg  opcode1_prev;
reg  opcode2_prev;
reg  opcode3_prev;
reg  opcode4_prev;
reg  opcode5_prev;
reg  read_0_prev;
reg  read_1_prev;
reg  read_2_prev;
reg  read_3_prev;
reg  read_4_prev;
reg  read_5_prev;

reg  read_0_expected_prev;
reg  read_1_expected_prev;
reg  read_2_expected_prev;
reg  read_3_expected_prev;
reg  read_4_expected_prev;
reg  read_5_expected_prev;

reg  last_read_0_exp;
reg  last_read_1_exp;
reg  last_read_2_exp;
reg  last_read_3_exp;
reg  last_read_4_exp;
reg  last_read_5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	opcode0_prev = opcode0;
	opcode1_prev = opcode1;
	opcode2_prev = opcode2;
	opcode3_prev = opcode3;
	opcode4_prev = opcode4;
	opcode5_prev = opcode5;
	read_0_prev = read_0;
	read_1_prev = read_1;
	read_2_prev = read_2;
	read_3_prev = read_3;
	read_4_prev = read_4;
	read_5_prev = read_5;
end

// update expected /o prevs

always @(trigger)
begin
	read_0_expected_prev = read_0_expected;
	read_1_expected_prev = read_1_expected;
	read_2_expected_prev = read_2_expected;
	read_3_expected_prev = read_3_expected;
	read_4_expected_prev = read_4_expected;
	read_5_expected_prev = read_5_expected;
end



// expected read_0
initial
begin
	read_0_expected = 1'bX;
end 

// expected read_1
initial
begin
	read_1_expected = 1'bX;
end 

// expected read_2
initial
begin
	read_2_expected = 1'bX;
end 

// expected read_3
initial
begin
	read_3_expected = 1'bX;
end 

// expected read_4
initial
begin
	read_4_expected = 1'bX;
end 

// expected read_5
initial
begin
	read_5_expected = 1'bX;
end 
// generate trigger
always @(opcode0_expected or opcode0 or opcode1_expected or opcode1 or opcode2_expected or opcode2 or opcode3_expected or opcode3 or opcode4_expected or opcode4 or opcode5_expected or opcode5 or read_0_expected or read_0 or read_1_expected or read_1 or read_2_expected or read_2 or read_3_expected or read_3 or read_4_expected or read_4 or read_5_expected or read_5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected opcode0 = %b | expected opcode1 = %b | expected opcode2 = %b | expected opcode3 = %b | expected opcode4 = %b | expected opcode5 = %b | expected read_0 = %b | expected read_1 = %b | expected read_2 = %b | expected read_3 = %b | expected read_4 = %b | expected read_5 = %b | ",opcode0_expected_prev,opcode1_expected_prev,opcode2_expected_prev,opcode3_expected_prev,opcode4_expected_prev,opcode5_expected_prev,read_0_expected_prev,read_1_expected_prev,read_2_expected_prev,read_3_expected_prev,read_4_expected_prev,read_5_expected_prev);
	$display("| real opcode0 = %b | real opcode1 = %b | real opcode2 = %b | real opcode3 = %b | real opcode4 = %b | real opcode5 = %b | real read_0 = %b | real read_1 = %b | real read_2 = %b | real read_3 = %b | real read_4 = %b | real read_5 = %b | ",opcode0_prev,opcode1_prev,opcode2_prev,opcode3_prev,opcode4_prev,opcode5_prev,read_0_prev,read_1_prev,read_2_prev,read_3_prev,read_4_prev,read_5_prev);
`endif
	if (
		( read_0_expected_prev !== 1'bx ) && ( read_0_prev !== read_0_expected_prev )
		&& ((read_0_expected_prev !== last_read_0_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_0_expected_prev);
		$display ("     Real value = %b", read_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_read_0_exp = read_0_expected_prev;
	end
	if (
		( read_1_expected_prev !== 1'bx ) && ( read_1_prev !== read_1_expected_prev )
		&& ((read_1_expected_prev !== last_read_1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_1_expected_prev);
		$display ("     Real value = %b", read_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_read_1_exp = read_1_expected_prev;
	end
	if (
		( read_2_expected_prev !== 1'bx ) && ( read_2_prev !== read_2_expected_prev )
		&& ((read_2_expected_prev !== last_read_2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_2_expected_prev);
		$display ("     Real value = %b", read_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_read_2_exp = read_2_expected_prev;
	end
	if (
		( read_3_expected_prev !== 1'bx ) && ( read_3_prev !== read_3_expected_prev )
		&& ((read_3_expected_prev !== last_read_3_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_3_expected_prev);
		$display ("     Real value = %b", read_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_read_3_exp = read_3_expected_prev;
	end
	if (
		( read_4_expected_prev !== 1'bx ) && ( read_4_prev !== read_4_expected_prev )
		&& ((read_4_expected_prev !== last_read_4_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_4_expected_prev);
		$display ("     Real value = %b", read_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_read_4_exp = read_4_expected_prev;
	end
	if (
		( read_5_expected_prev !== 1'bx ) && ( read_5_prev !== read_5_expected_prev )
		&& ((read_5_expected_prev !== last_read_5_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_5_expected_prev);
		$display ("     Real value = %b", read_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_read_5_exp = read_5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mips_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire opcode0;
wire opcode1;
wire opcode2;
wire opcode3;
wire opcode4;
wire opcode5;
wire read_0;
wire read_1;
wire read_2;
wire read_3;
wire read_4;
wire read_5;

wire sampler;                             

// assign statements (if any)                          
mips_32 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.opcode0(opcode0),
	.opcode1(opcode1),
	.opcode2(opcode2),
	.opcode3(opcode3),
	.opcode4(opcode4),
	.opcode5(opcode5),
	.read_0(read_0),
	.read_1(read_1),
	.read_2(read_2),
	.read_3(read_3),
	.read_4(read_4),
	.read_5(read_5)
);

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
end 

mips_32_vlg_sample_tst tb_sample (
	.clock(clock),
	.sampler_tx(sampler)
);

mips_32_vlg_check_tst tb_out(
	.opcode0(opcode0),
	.opcode1(opcode1),
	.opcode2(opcode2),
	.opcode3(opcode3),
	.opcode4(opcode4),
	.opcode5(opcode5),
	.read_0(read_0),
	.read_1(read_1),
	.read_2(read_2),
	.read_3(read_3),
	.read_4(read_4),
	.read_5(read_5),
	.sampler_rx(sampler)
);
endmodule

